[files]
Source: "NSudoAPI.dll"; DestDir: "{tmp}"; DestName: "API.dll"; Flags: DontCopy IgnoreVersion

[code]
(*
 * PROJECT:   NSudo Shared Library
 * FILE:      NSudoAPI.h
 * PURPOSE:   Definition for NSudo Shared Library
 *
 * LICENSE:   The MIT License
 *
 * DEVELOPER: Mouri_Naruto (Mouri_Naruto AT Outlook.com)
 *)

(**
 * @brief Reads data from the NSudo logging infrastructure.
 * @return The content of the data from the NSudo logging infrastructure.
*)
{Function NSudoReadLog(): PWideChar;
  External 'NSudoReadLog@files:API.dll stdcall';}

(**
 * @brief Reads data to the NSudo logging infrastructure.
 * @param Sender The sender name of the data.
 * @param Content The content of the data.
*)
{Procedure NSudoWriteLog(
    const Sender: WideString;
    const Content: WideString
    );
  External 'NSudoWriteLog@files:API.dll stdcall';}

(**
* Contains values that specify the type of user mode.
*)
type
  NSUDO_USER_MODE_TYPE =
  (
    UM_DEFAULT,
    UM_TRUSTED_INSTALLER,
    UM_SYSTEM,
    UM_CURRENT_USER,
    UM_CURRENT_PROCESS,
    UM_CURRENT_PROCESS_DROP_RIGHT,
    UM_CURRENT_USER_ELEVATED // Since NSudo 8.1.0
  );// NSUDO_USER_MODE_TYPE, *PNSUDO_USER_MODE_TYPE;

(**
* Contains values that specify the type of privileges mode.
*)
  NSUDO_PRIVILEGES_MODE_TYPE =
  (
    PM_DEFAULT,
    PM_ENABLE_ALL_PRIVILEGES,
    PM_DISABLE_ALL_PRIVILEGES
  );// NSUDO_PRIVILEGES_MODE_TYPE, *PNSUDO_PRIVILEGES_MODE_TYPE;

(**
 * Contains values that specify the type of mandatory label.
 *)
  NSUDO_MANDATORY_LABEL_TYPE =
  (
    ML_UNTRUSTED,
    ML_LOW,
    ML_MEDIUM,
    ML_MEDIUM_PLUS,
    ML_HIGH,
    ML_SYSTEM,
    ML_PROTECTED_PROCESS
  );// NSUDO_MANDATORY_LABEL_TYPE, *PNSUDO_MANDATORY_LABEL_TYPE;

(**
 * Contains values that specify the type of process priority class.
 *)
  NSUDO_PROCESS_PRIORITY_CLASS_TYPE =
  (
    PPC_IDLE,
    PPC_BELOW_NORMAL,
    PPC_NORMAL,
    PPC_ABOVE_NORMAL,
    PPC_HIGH,
    PPC_REALTIME
  );// NSUDO_PROCESS_PRIORITY_CLASS_TYPE, *PNSUDO_PROCESS_PRIORITY_CLASS_TYPE;

(**
* Contains values that specify the type of ShowWindow mode.
*)
  NSUDO_SHOW_WINDOW_MODE_TYPE =
  (
    SWM_DEFAULT,
    SWM_SHOW,
    SWM_HIDE,
    SWM_MAXIMIZE,
    SWM_MINIMIZE
  );// NSUDO_SHOW_WINDOW_MODE_TYPE, *PNSUDO_SHOW_WINDOW_MODE_TYPE;

(**
 * Creates a new process and its primary thread.
 *
 * @param UserModeType A value from the NSUDO_USER_MODE_TYPE enumerated type
 *                     that identifies the user mode.
 * @param PrivilegesModeType A value from the NSUDO_PRIVILEGES_MODE_TYPE
 *                           enumerated type that identifies the privileges
 *                           mode.
 * @param MandatoryLabelType A value from the NSUDO_MANDATORY_LABEL_TYPE
 *                           enumerated type that identifies the mandatory
 *                           label.
 * @param ProcessPriorityClassType A value from the
 *                                 NSUDO_PROCESS_PRIORITY_CLASS_TYPE enumerated
 *                                 type that identifies the process priority
 *                                 class.
 * @param ShowWindowModeType A value from the NSUDO_SHOW_WINDOW_MODE_TYPE
 *                           enumerated type that identifies the ShowWindow
 *                           mode.
 * @param WaitInterval The time-out interval for waiting the process, in
 *                     milliseconds.
 * @param CreateNewConsole If this parameter is TRUE, the new process has a new
 *                         console, instead of inheriting its parent's console
 *                         (the default).
 * @param CommandLine The command line to be executed. The maximum length of
 *                    this string is 32K characters, the module name portion of
 *                    CommandLine is limited to MAX_PATH characters.
 * @param CurrentDirectory The full path to the current directory for the
 *                         process. The string can also specify a UNC path. If
 *                         this parameter is nullptr, the new process will
 *                         the same current drive and directory as the calling
 *                         process. (This feature is provided primarily for
 *                         shells that need to start an application and specify
 *                         its initial drive and working directory.)
 * @return HRESULT. If the function succeeds, the return value is S_OK.
 *)
Function NSudoCreateProcess(
    const UserModeType: NSUDO_USER_MODE_TYPE;
    const PrivilegesModeType: NSUDO_PRIVILEGES_MODE_TYPE;
    const MandatoryLabelType: NSUDO_MANDATORY_LABEL_TYPE;
    const ProcessPriorityClassType: NSUDO_PROCESS_PRIORITY_CLASS_TYPE;
    const ShowWindowModeType: NSUDO_SHOW_WINDOW_MODE_TYPE;
    const WaitInterval: DWORD;
    const CreateNewConsole: BOOL;
    const CommandLine: WideString;
    const CurrentDirectory: WideString
    ): HRESULT;
  External 'NSudoCreateProcess@files:API.dll stdcall';
